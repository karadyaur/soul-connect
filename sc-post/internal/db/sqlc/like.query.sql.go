// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: like.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLikeForComment = `-- name: CreateLikeForComment :exec
INSERT INTO likes (comment_id, user_id)
VALUES ($1, $2)
RETURNING id, comment_id, user_id, created_at
`

type CreateLikeForCommentParams struct {
	CommentID pgtype.UUID `json:"comment_id"`
	UserID    pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateLikeForComment(ctx context.Context, arg CreateLikeForCommentParams) error {
	_, err := q.db.Exec(ctx, createLikeForComment, arg.CommentID, arg.UserID)
	return err
}

const createLikeForPost = `-- name: CreateLikeForPost :exec
INSERT INTO likes (post_id, user_id)
VALUES ($1, $2)
RETURNING id, post_id, user_id, created_at
`

type CreateLikeForPostParams struct {
	PostID pgtype.UUID `json:"post_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateLikeForPost(ctx context.Context, arg CreateLikeForPostParams) error {
	_, err := q.db.Exec(ctx, createLikeForPost, arg.PostID, arg.UserID)
	return err
}

const deleteLikeForComment = `-- name: DeleteLikeForComment :exec
DELETE FROM likes
WHERE comment_id = $1 AND user_id = $2
`

type DeleteLikeForCommentParams struct {
	CommentID pgtype.UUID `json:"comment_id"`
	UserID    pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteLikeForComment(ctx context.Context, arg DeleteLikeForCommentParams) error {
	_, err := q.db.Exec(ctx, deleteLikeForComment, arg.CommentID, arg.UserID)
	return err
}

const deleteLikeForPost = `-- name: DeleteLikeForPost :exec
DELETE FROM likes
WHERE post_id = $1 AND user_id = $2
`

type DeleteLikeForPostParams struct {
	PostID pgtype.UUID `json:"post_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteLikeForPost(ctx context.Context, arg DeleteLikeForPostParams) error {
	_, err := q.db.Exec(ctx, deleteLikeForPost, arg.PostID, arg.UserID)
	return err
}

const getLikesCountForComment = `-- name: GetLikesCountForComment :one
SELECT likes_count
FROM comments
WHERE id = $1
`

func (q *Queries) GetLikesCountForComment(ctx context.Context, commentID pgtype.UUID) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getLikesCountForComment, commentID)
	var likes_count pgtype.Int4
	err := row.Scan(&likes_count)
	return likes_count, err
}

const getLikesCountForPost = `-- name: GetLikesCountForPost :one
SELECT likes_count
FROM posts
WHERE id = $1
`

func (q *Queries) GetLikesCountForPost(ctx context.Context, postID pgtype.UUID) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getLikesCountForPost, postID)
	var likes_count pgtype.Int4
	err := row.Scan(&likes_count)
	return likes_count, err
}
