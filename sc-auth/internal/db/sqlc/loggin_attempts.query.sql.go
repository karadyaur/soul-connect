// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: loggin_attempts.query.sql

package db

import (
	"context"
)

const deleteOldLoginAttempts = `-- name: DeleteOldLoginAttempts :exec
DELETE FROM login_attempts
WHERE attempt_time < NOW() - INTERVAL '30 days'
`

func (q *Queries) DeleteOldLoginAttempts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOldLoginAttempts)
	return err
}

const getFailedLoginAttemptsByUsername = `-- name: GetFailedLoginAttemptsByUsername :many
SELECT id, username, success, attempt_time
FROM login_attempts
WHERE username = $1
  AND success = FALSE
ORDER BY attempt_time DESC
LIMIT $2
`

type GetFailedLoginAttemptsByUsernameParams struct {
	Username     string `json:"username"`
	RequestLimit int32  `json:"request_limit"`
}

func (q *Queries) GetFailedLoginAttemptsByUsername(ctx context.Context, arg GetFailedLoginAttemptsByUsernameParams) ([]LoginAttempt, error) {
	rows, err := q.db.Query(ctx, getFailedLoginAttemptsByUsername, arg.Username, arg.RequestLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginAttempt{}
	for rows.Next() {
		var i LoginAttempt
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Success,
			&i.AttemptTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLoginAttemptsByUsername = `-- name: GetLoginAttemptsByUsername :many
SELECT id, username, success, attempt_time
FROM login_attempts
WHERE username = $1
ORDER BY attempt_time DESC
LIMIT $2
`

type GetLoginAttemptsByUsernameParams struct {
	Username     string `json:"username"`
	RequestLimit int32  `json:"request_limit"`
}

func (q *Queries) GetLoginAttemptsByUsername(ctx context.Context, arg GetLoginAttemptsByUsernameParams) ([]LoginAttempt, error) {
	rows, err := q.db.Query(ctx, getLoginAttemptsByUsername, arg.Username, arg.RequestLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginAttempt{}
	for rows.Next() {
		var i LoginAttempt
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Success,
			&i.AttemptTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logFailedLogin = `-- name: LogFailedLogin :exec
INSERT INTO login_attempts (username, success)
VALUES ($1, FALSE)
`

func (q *Queries) LogFailedLogin(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, logFailedLogin, username)
	return err
}

const logSuccessfulLogin = `-- name: LogSuccessfulLogin :exec
INSERT INTO login_attempts (username, success)
VALUES ($1, TRUE)
`

func (q *Queries) LogSuccessfulLogin(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, logSuccessfulLogin, username)
	return err
}
