// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: label.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLabelToPost = `-- name: AddLabelToPost :exec
INSERT INTO labels_posts (label_id, post_id)
VALUES ($1, $2)
RETURNING label_id, post_id
`

type AddLabelToPostParams struct {
	LabelID pgtype.UUID `json:"label_id"`
	PostID  pgtype.UUID `json:"post_id"`
}

func (q *Queries) AddLabelToPost(ctx context.Context, arg AddLabelToPostParams) error {
	_, err := q.db.Exec(ctx, addLabelToPost, arg.LabelID, arg.PostID)
	return err
}

const getAllLabels = `-- name: GetAllLabels :many
SELECT id, name
FROM labels
`

func (q *Queries) GetAllLabels(ctx context.Context) ([]Label, error) {
	rows, err := q.db.Query(ctx, getAllLabels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Label{}
	for rows.Next() {
		var i Label
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLabelsForPost = `-- name: GetLabelsForPost :many
SELECT l.id, l.name
FROM labels_posts lp
    JOIN labels l ON lp.label_id = l.id
WHERE lp.post_id = $1
`

func (q *Queries) GetLabelsForPost(ctx context.Context, postID pgtype.UUID) ([]Label, error) {
	rows, err := q.db.Query(ctx, getLabelsForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Label{}
	for rows.Next() {
		var i Label
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByLabel = `-- name: GetPostsByLabel :many
SELECT p.id, p.title, p.description, p.likes_count, p.created_at, p.updated_at
FROM posts p
    JOIN labels_posts lp ON p.id = lp.post_id
WHERE lp.label_id = $1
`

type GetPostsByLabelRow struct {
	ID          pgtype.UUID      `json:"id"`
	Title       string           `json:"title"`
	Description pgtype.Text      `json:"description"`
	LikesCount  pgtype.Int4      `json:"likes_count"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetPostsByLabel(ctx context.Context, labelID pgtype.UUID) ([]GetPostsByLabelRow, error) {
	rows, err := q.db.Query(ctx, getPostsByLabel, labelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByLabelRow{}
	for rows.Next() {
		var i GetPostsByLabelRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.LikesCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLabelFromPost = `-- name: RemoveLabelFromPost :exec
DELETE FROM labels_posts
WHERE label_id = $1 AND post_id = $2
`

type RemoveLabelFromPostParams struct {
	LabelID pgtype.UUID `json:"label_id"`
	PostID  pgtype.UUID `json:"post_id"`
}

func (q *Queries) RemoveLabelFromPost(ctx context.Context, arg RemoveLabelFromPostParams) error {
	_, err := q.db.Exec(ctx, removeLabelFromPost, arg.LabelID, arg.PostID)
	return err
}
