// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscription.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscriptions (subscriber_id, author_id)
VALUES ($1, $2)
RETURNING id, subscriber_id, author_id, created_at
`

type CreateSubscriptionParams struct {
	SubscriberID pgtype.UUID `json:"subscriber_id"`
	AuthorID     pgtype.UUID `json:"author_id"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, createSubscription, arg.SubscriberID, arg.AuthorID)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions
WHERE subscriber_id = $1 AND author_id = $2
`

type DeleteSubscriptionParams struct {
	SubscriberID pgtype.UUID `json:"subscriber_id"`
	AuthorID     pgtype.UUID `json:"author_id"`
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) error {
	_, err := q.db.Exec(ctx, deleteSubscription, arg.SubscriberID, arg.AuthorID)
	return err
}

const getSubscriptionsByUserID = `-- name: GetSubscriptionsByUserID :many
SELECT author_id
FROM subscriptions
WHERE subscriber_id = $1
`

func (q *Queries) GetSubscriptionsByUserID(ctx context.Context, subscriberID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getSubscriptionsByUserID, subscriberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var author_id pgtype.UUID
		if err := rows.Scan(&author_id); err != nil {
			return nil, err
		}
		items = append(items, author_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
