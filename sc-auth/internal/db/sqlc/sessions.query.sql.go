// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, session_token, session_expires_at)
VALUES ($1, $2, $3)
    RETURNING id, user_id, session_token, session_expires_at
`

type CreateSessionParams struct {
	UserID           pgtype.UUID      `json:"user_id"`
	SessionToken     string           `json:"session_token"`
	SessionExpiresAt pgtype.Timestamp `json:"session_expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.SessionToken, arg.SessionExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.SessionExpiresAt,
	)
	return i, err
}

const deleteAllSessionsForUser = `-- name: DeleteAllSessionsForUser :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteAllSessionsForUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllSessionsForUser, userID)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, sessionToken)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT user_id, session_token, session_expires_at
FROM sessions
WHERE session_token = $1
  AND session_expires_at > NOW()
    LIMIT 1
`

type GetSessionByTokenRow struct {
	UserID           pgtype.UUID      `json:"user_id"`
	SessionToken     string           `json:"session_token"`
	SessionExpiresAt pgtype.Timestamp `json:"session_expires_at"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, sessionToken)
	var i GetSessionByTokenRow
	err := row.Scan(&i.UserID, &i.SessionToken, &i.SessionExpiresAt)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :many
SELECT id, session_token, session_expires_at
FROM sessions
WHERE user_id = $1
  AND session_expires_at > NOW()
`

type GetSessionByUserIdRow struct {
	ID               pgtype.UUID      `json:"id"`
	SessionToken     string           `json:"session_token"`
	SessionExpiresAt pgtype.Timestamp `json:"session_expires_at"`
}

func (q *Queries) GetSessionByUserId(ctx context.Context, userID pgtype.UUID) ([]GetSessionByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getSessionByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSessionByUserIdRow{}
	for rows.Next() {
		var i GetSessionByUserIdRow
		if err := rows.Scan(&i.ID, &i.SessionToken, &i.SessionExpiresAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions
SET session_expires_at = $1
WHERE session_token = $2
`

type UpdateSessionExpiryParams struct {
	NewExpiry    pgtype.Timestamp `json:"new_expiry"`
	SessionToken string           `json:"session_token"`
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpiry, arg.NewExpiry, arg.SessionToken)
	return err
}
