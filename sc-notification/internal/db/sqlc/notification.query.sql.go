// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, content)
VALUES ($1, $2)
RETURNING id, user_id, content, created_at
`

type CreateNotificationParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Content string      `json:"content"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.UserID, arg.Content)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationsByUser = `-- name: GetNotificationsByUser :many
SELECT id, user_id, content, created_at
FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsByUser(ctx context.Context, userID pgtype.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
