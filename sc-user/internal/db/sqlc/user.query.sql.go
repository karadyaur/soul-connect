// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (auth_id, full_name, bio, photo_link)
VALUES ($1, $2, $3, $4)
RETURNING id, auth_id, full_name, bio, photo_link, created_at, updated_at
`

type CreateUserParams struct {
	AuthID    pgtype.UUID `json:"auth_id"`
	FullName  string      `json:"full_name"`
	Bio       pgtype.Text `json:"bio"`
	PhotoLink pgtype.Text `json:"photo_link"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.AuthID,
		arg.FullName,
		arg.Bio,
		arg.PhotoLink,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AuthID,
		&i.FullName,
		&i.Bio,
		&i.PhotoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, auth_id, full_name, bio, photo_link, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AuthID,
		&i.FullName,
		&i.Bio,
		&i.PhotoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET full_name = COALESCE($1, full_name),
    bio = COALESCE($2, bio),
    photo_link = COALESCE($3, photo_link),
    updated_at = NOW()
WHERE id = $4
`

type UpdateUserParams struct {
	FullName  string      `json:"full_name"`
	Bio       pgtype.Text `json:"bio"`
	PhotoLink pgtype.Text `json:"photo_link"`
	ID        pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.FullName,
		arg.Bio,
		arg.PhotoLink,
		arg.ID,
	)
	return err
}
